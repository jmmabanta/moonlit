{"version":3,"sources":["components/Header.js","components/stocks/StockCard.js","components/stocks/StockPortfolio.js","App.js","index.js"],"names":["Header","props","AppBar","position","sx","backgroundColor","padding","Toolbar","style","flexDirection","Typography","variant","margin","color","CircularProgress","value","updateProgress","PriceText","styled","pricechange","StockCard","Card","textShadow","width","maxWidth","ticker","name","priceChange","currentPrice","toFixed","StockPortfolio","useState","stockData","setStockData","loading","setLoading","updateStockData","axios","get","process","REACT_APP_API_URL","then","res","console","log","data","resetCounter","catch","err","error","useEffect","setInterval","REACT_APP_API_UPDATE","Container","textAlign","Grid","container","spacing","justifyContent","map","stock","idx","item","App","setUpdateProgress","axiosRetry","retries","retryDelay","retryCount","updateCounter","current","progressAnim","className","paddingTop","clearInterval","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd95767c.chunk.js","sourcesContent":["import { CircularProgress } from '@mui/material';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\n/**\n * The App Bar at the top of the page.\n * @typedef HeaderProps\n * @property {int} updateProgress An integer (0-100) that indcates\n *                                how filled the update progress circle is.\n * @param {HeaderProps} props Includes the progress until next update.\n * @returns The header at the top of the page.\n */\nconst Header = (props) => {\n  return (\n    <AppBar\n      position=\"sticky\"\n      sx={{ backgroundColor: '#37425B', padding: '0.25em' }}\n    >\n      <Toolbar>\n        <div style={{ flexDirection: 'column' }}>\n          <Typography variant=\"h3\" sx={{ margin: 0 }}>\n            Moonlit\n          </Typography>\n          <Typography variant=\"subtitle1\" sx={{ margin: 0, color: '#FFD700' }}>\n            To the moon, To the stars...\n          </Typography>\n        </div>\n        <CircularProgress variant=\"determinate\" value={props.updateProgress} />\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import { Card, Typography } from '@mui/material';\nimport { styled } from '@mui/system';\n\nconst PriceText = styled(Typography)`\n  color: ${(props) => {\n    if (props.pricechange >= 0) return '#18BC9D';\n    else return '#DF9DC1';\n  }};\n`;\n\n/**\n * A small card that displays quick information regarding a stock.\n * @typedef CardProps\n * @property {string} ticker The stock ticker.\n * @property {string} name The name of the company.\n * @property {float} currentPrice The current price of the stock.\n * @property {float} priceChange The change in price of the stock (+/-).\n * @param {CardProps} props - Contains the information to display.\n * @returns A small UI Card that shows, at a glance, the current stock price\n *          and the trend.\n */\nconst StockCard = (props) => {\n  return (\n    <Card\n      sx={{\n        backgroundColor: '#1D6988',\n        color: 'white',\n        textShadow: '1px 1px #333333',\n        width: '100vw',\n        maxWidth: '220px',\n        padding: '1em'\n      }}\n    >\n      <Typography variant=\"h4\">{props.ticker}</Typography>\n      <Typography variant=\"caption\">{props.name}</Typography>\n      <PriceText variant=\"h6\" pricechange={props.priceChange}>\n        ${props.currentPrice.toFixed(2) || 0.0} (\n        {props.priceChange > 0\n          ? '+$' + props.priceChange.toFixed(2)\n          : '-$' + (props.priceChange * -1).toFixed(2)}\n        )\n      </PriceText>\n    </Card>\n  );\n};\n\nexport default StockCard;\n","import { Container, Grid, Typography } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport StockCard from './StockCard';\n\n/**\n * The 'main screen' that displays all of the user's stocks.\n * @typedef PortfolioProps\n * @property {Function} resetCounter Reset the progress once stocks update\n *                                   and restart animation.\n * @param {PortfolioProps} props\n * @returns A grid of stock cards, which display the user's stock portfolio.\n */\nconst StockPortfolio = (props) => {\n  const [stockData, setStockData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const updateStockData = () => {\n    axios\n      .get(process.env.REACT_APP_API_URL + '/update')\n      .then((res) => {\n        console.log(res.data);\n        setStockData(res.data);\n        props.resetCounter();\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  useEffect(() => {\n    updateStockData();\n    setInterval(updateStockData, process.env.REACT_APP_API_UPDATE);\n    // eslint-disable-next-line\n  }, []);\n\n  if (loading) {\n    return (\n      <Container sx={{ color: '#FFFFFF', textAlign: 'center' }}>\n        <Typography variant=\"h5\">Loading stocks...</Typography>\n      </Container>\n    );\n  }\n\n  return (\n    <Grid container spacing={2} justifyContent=\"center\">\n      {stockData.map((stock, idx) => {\n        return (\n          <Grid item key={idx}>\n            <StockCard\n              ticker={stock['ticker']}\n              name={stock['name']}\n              currentPrice={stock['price']}\n              priceChange={stock['change']}\n            />\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nexport default StockPortfolio;\n","import Container from '@mui/material/Container';\nimport Header from './components/Header';\nimport StockPortfolio from './components/stocks/StockPortfolio';\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { useEffect, useState } from 'react';\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [updateProgress, setUpdateProgress] = useState(0);\n\n  axiosRetry(axios, {\n    retries: 999,\n    retryDelay: (retryCount) => retryCount * 1000\n  });\n\n  const updateCounter = () => {\n    setUpdateProgress((current) => (current < 100 ? (current += 5) : current));\n  };\n\n  let progressAnim = null;\n  const resetCounter = () => {\n    if (progressAnim !== null) {\n      clearInterval(progressAnim);\n      progressAnim = null;\n    }\n    setUpdateProgress(10);\n    progressAnim = setInterval(\n      updateCounter,\n      process.env.REACT_APP_API_UPDATE / 20\n    );\n  };\n\n  useEffect(() => {\n    axios\n      .get(process.env.REACT_APP_API_URL)\n      .then((res) => {\n        console.log('CONNECTED!');\n        console.log(res.data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }, []);\n\n  if (loading) return <h1>Loading...</h1>;\n\n  return (\n    <div className=\"App\">\n      <Header updateProgress={updateProgress} />\n      <Container maxWidth=\"none\" sx={{ paddingTop: '2em' }}>\n        <StockPortfolio resetCounter={resetCounter} />\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}